name: Build

on:
  push:
    branches: [ master ]

jobs:
  maven-central:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        type: [ modular, non-modular ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 16
      - name: Find staging url
        id: staging
        run: |
          STAGING_URL=`cat settings.properties | grep staging_url | cut -d'=' -f2`
          echo ::set-output name=staging_url::$STAGING_URL
        shell: bash
      - name: Test Maven (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install xvfb tigervnc-standalone-server tigervnc-common
          export DISPLAY=:90
          mkdir /home/runner/.vnc
          echo 123456 | vncpasswd -f > /home/runner/.vnc/passwd
          chmod -v 600 /home/runner/.vnc/passwd
          vncserver :90 -localhost -nolisten tcp
          mvn versions:set-property -Dproperty=staging.repo.url -DnewVersion=${{ env.staging_url }} -DgenerateBackupPoms=false -f ${{ matrix.type }}/maven/hellofx
          mvn clean compile -f ${{ matrix.type }}/maven/hellofx
          mvn javafx:run -f ${{ matrix.type }}/maven/hellofx
          vncserver -kill :90
        env:
          staging_url: ${{ steps.staging.outputs.staging_url }}
      - name: Test Maven
        if: runner.os != 'Linux'
        run: |
          mvn versions:set-property -Dproperty=staging.repo.url -DnewVersion=${{ env.staging_url }} -DgenerateBackupPoms=false -f ${{ matrix.type }}/maven/hellofx
          mvn clean compile -f ${{ matrix.type }}/maven/hellofx
          mvn javafx:run -f ${{ matrix.type }}/maven/hellofx
        env:
          staging_url: ${{ steps.staging.outputs.staging_url }}
      - name: Test Gradle (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:90
          echo 123456 | vncpasswd -f > /home/runner/.vnc/passwd
          chmod -v 600 /home/runner/.vnc/passwd
          vncserver :90 -localhost -nolisten tcp
          cd ${{ matrix.type }}/gradle/hellofx
          gradle run -Pstaging=${{ env.staging_url }}
          vncserver -kill :90
        env:
          staging_url: ${{ steps.staging.outputs.staging_url }}
      - name: Test Gradle
        if: runner.os != 'Linux'
        run: |
          cd ${{ matrix.type }}/gradle/hellofx
          gradle run -Pstaging=${{ env.staging_url }}
        env:
          staging_url: ${{ steps.staging.outputs.staging_url }}
  sdk:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        type: [ modular, non-modular ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 16
      - name: Find SDK version
        id: sdk
        run: |
          SDK_VERSION=`cat settings.properties | grep sdk_version | cut -d'=' -f2`
          echo ::set-output name=sdk_version::$SDK_VERSION
        shell: bash
      - name: Find Platform
        id: platform
        run: |
          OS=${{ matrix.os }}
          SDK=/tmp/javafx-sdk-${{ steps.sdk.outputs.sdk_version }}
          if [[ "$OS" == "macos-latest" ]]; then
            echo ::set-output name=platform::osx
          elif [[ "$OS" == "windows-latest" ]]; then
            echo ::set-output name=platform::windows
            SDK=D:\\javafx-sdk-${{ steps.sdk.outputs.sdk_version }}
          else
            echo ::set-output name=platform::linux
          fi
          echo ::set-output name=javafx::$SDK
        shell: bash
      - name: Setup JavaFX
        if: runner.os != 'Windows'
        run: |
          wget -P /tmp https://download2.gluonhq.com/openjfx/${{ env.sdk_version }}/openjfx-${{ env.sdk_version }}_${{ env.platform }}-x64_bin-sdk.zip
          unzip /tmp/openjfx-${{ env.sdk_version }}_${{ env.platform }}-x64_bin-sdk.zip -d /tmp
        env:
          sdk_version: ${{ steps.sdk.outputs.sdk_version }}
          platform: ${{ steps.platform.outputs.platform }}
      - name: Setup JavaFX (Windows)
        if: runner.os == 'Windows'
        run: |
          bitsadmin /Transfer DownloadJavaFX https://download2.gluonhq.com/openjfx/${{ env.sdk_version }}/openjfx-${{ env.sdk_version }}_windows-x64_bin-sdk.zip D:\openjfx-${{ env.sdk_version }}_windows-x64_bin-sdk.zip
          Expand-Archive -Force D:\openjfx-${{ env.sdk_version }}_windows-x64_bin-sdk.zip D:\
        env:
          sdk_version: ${{ steps.sdk.outputs.sdk_version }}
      - name: Test Gradle (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install xvfb tigervnc-standalone-server tigervnc-common
          export DISPLAY=:90
          mkdir /home/runner/.vnc
          echo 123456 | vncpasswd -f > /home/runner/.vnc/passwd
          chmod -v 600 /home/runner/.vnc/passwd
          vncserver :90 -localhost -nolisten tcp
          cd ${{ matrix.type }}/gradle/hellofx
          gradle run -Psdk=${{ env.JAVAFX_HOME }}
          vncserver -kill :90
        env:
          JAVAFX_HOME: ${{ steps.platform.outputs.javafx }}
      - name: Test Gradle
        if: runner.os != 'Linux'
        run: |
          cd ${{ matrix.type }}/gradle/hellofx
          gradle run -Psdk=${{ env.JAVAFX_HOME }}
        env:
          JAVAFX_HOME: ${{ steps.platform.outputs.javafx }}
  jmod:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 16
      - name: Find SDK version
        id: sdk
        run: |
          JMOD_VERSION=`cat settings.properties | grep jmod_version | cut -d'=' -f2`
          echo ::set-output name=jmod_version::$JMOD_VERSION
        shell: bash
      - name: Find Platform
        id: platform
        run: |
          OS=${{ matrix.os }}
          JMOD=/tmp/javafx-jmods-${{ steps.sdk.outputs.jmod_version }}
          if [[ "$OS" == "macos-latest" ]]; then
            echo ::set-output name=platform::osx
          elif [[ "$OS" == "windows-latest" ]]; then
            echo ::set-output name=platform::windows
            JMOD=D:\\javafx-jmods-${{ steps.sdk.outputs.jmod_version }}
          else
            echo ::set-output name=platform::linux
          fi
          echo ::set-output name=javafx::$JMOD
        shell: bash
      - name: Test JMODS
        if: runner.os != 'Windows'
        run: |
          wget -P /tmp https://download2.gluonhq.com/openjfx/${{ env.jmod_version }}/openjfx-${{ env.jmod_version }}_${{ env.platform }}-x64_bin-jmods.zip
          unzip /tmp/openjfx-${{ env.jmod_version }}_${{ env.platform }}-x64_bin-jmods.zip -d /tmp
          cd modular/maven/hellofx
          mvn package
          ${{ env.JAVA_HOME }}/bin/jlink \
          --module-path ${{ env.JAVAFX_HOME }}:target/hellofx-1.0-SNAPSHOT.jar \
          --add-modules javafx.fxml,javafx.controls,hellofx \
          --output target/runtime \
          --strip-debug --compress 2 --no-header-files --no-man-pages
          target/runtime/bin/java -m hellofx/org.openjfx.MainApp
        env:
          jmod_version: ${{ steps.sdk.outputs.jmod_version }}
          platform: ${{ steps.platform.outputs.platform }}
          JAVAFX_HOME: ${{ steps.platform.outputs.javafx }}
      - name: Test JMODS (Windows)
        if: runner.os == 'Windows'
        run: |
          bitsadmin /Transfer DownloadJavaFX https://download2.gluonhq.com/openjfx/${{ env.jmod_version }}/openjfx-${{ env.jmod_version }}_windows-x64_bin-jmods.zip D:\openjfx-${{ env.jmod_version }}_windows-x64_bin-jmods.zip
          Expand-Archive -Force D:\openjfx-${{ env.jmod_version }}_windows-x64_bin-jmods.zip D:\
          cd modular\maven\hellofx
          mvn package
          ${{ env.JAVA_HOME }}\bin\jlink ^
          --module-path ${{ env.JAVAFX_HOME }}:target/hellofx-1.0-SNAPSHOT.jar ^
          --add-modules javafx.fxml,javafx.controls,hellofx ^
          --output target/runtime ^
          --strip-debug --compress 2 --no-header-files --no-man-pages
          target\runtime\bin\java -m hellofx/org.openjfx.MainApp
        env:
          jmod_version: ${{ steps.sdk.outputs.jmod_version }}
          JAVAFX_HOME: ${{ steps.platform.outputs.javafx }}